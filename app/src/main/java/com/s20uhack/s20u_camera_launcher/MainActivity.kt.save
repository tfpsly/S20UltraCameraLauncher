package com.s20uhack.s20u_camera_launcher

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.os.Environment
import android.provider.MediaStore
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.ui.Modifier
import androidx.core.content.FileProvider
import com.s20uhack.s20u_camera_launcher.ui.theme.S20U_camera_launcherTheme
import java.io.File
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.Date


class MainActivity : ComponentActivity() {
    private val tag: String = "S20UcameraLauncher"
    private val RequestImageCapture: Int = 1;

    fun executeShellCommand(command: String) {
        Log.w(tag, "Shell command: $command")
        var process = Runtime.getRuntime().exec(command)
        process.waitFor()
    }
    fun LaunchCameraFromCmd() {
        Log.w(tag, "LaunchCameraFromCmd");
        // executeShellCommand("am start -a android.media.action.IMAGE_CAPTURE --ei samsung.android.scaler.zoomMapRatio 1");
        executeShellCommand("am start --user 0 -a android.intent.action.MAIN -c android.intent.category.HOME")
    }

    fun LaunchImageCaptureFromIntent() {
        Log.w(tag, "LaunchImageCaptureFromIntent");
        // Launches the image_capture only; not the whole camera app.
        // Open the ImageCapture intent with patched telezoom limit
        val cameraIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        // val cameraIntent = Intent("android.media.action.IMAGE_CAPTURE")
        // val cameraIntent = Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA)

        Log.w(tag, cameraIntent.toString())
        cameraIntent.putExtra("samsung.android.scaler.zoomMapRatio", 1.0)
        //takePictureIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        cameraIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)
        try {
            Log.w(tag, "ImageCapture intent extras:");
            Log.w(tag, cameraIntent.getExtras().toString());
            startActivity(cameraIntent);
            Thread.sleep(200);
        } catch (e: Exception) {
            // display error state to the user
        }
    }

    fun LaunchCameraAppFromIntent() {
        Log.w(tag, "LaunchCameraAppFromIntent");
        // Launches the normal camera app, but extra key zoomMapRatio is ineffective.
        // val cameraAppIntent = Intent("com.sec.android.app.camera.ACTION_CAMERA_START") // Do not launch
        // val cameraAppIntent = Intent("android.media.action.LAUNCHER") // Do not launch
        // val cameraAppIntent = Intent("com.sec.android.app.camera/.Camera") // No 5x tele zoom
        // val cameraAppIntent = packageManager.getLaunchIntentForPackage("com.sec.android.app.camera")
        val cameraAppIntent = packageManager.getLaunchIntentForPackage("com.sec.android.app.camera")

        if (cameraAppIntent != null) {
            Log.w(tag, cameraAppIntent.toString())
            cameraAppIntent.putExtra("samsung.android.scaler.zoomMapRatio", 1.0)
            cameraAppIntent.putExtra("android.intent.extra.quickCapture",true);
            //cameraAppIntent.putExtra("android.intent.extras.CAMERA_FACING", 1);
            cameraAppIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
            try {
                startActivity(cameraAppIntent);
                Thread.sleep(200);
            } catch (e: Exception) {
                // display error state to the user
            }
        }
    }

    private var mMediaUri: String = ""
    @Throws(IOException::class)
    private fun createImageFile(): File {
        // Create an image file name
        val timeStamp: String = SimpleDateFormat("yyyyMMdd_HHmmss").format(Date())
        Log.w(tag, "Env DCIM = " + Environment.DIRECTORY_DCIM)
        val storageDir: File? = getExternalFilesDir(Environment.DIRECTORY_DCIM)
        if (storageDir == null) Log.e(tag,"storageDir is null")
        else Log.w(tag, "- StorageDir = " + storageDir + " sdcard = " + Environment.getExternalStorageDirectory())
        return File.createTempFile(
            "JPEG_${timeStamp}_", /* prefix */
            ".jpg", /* suffix */
            storageDir /* directory */
        ).apply {
            // Save a file: path for use with ACTION_VIEW intents
            // currentPhotoPath = absolutePath
            mMediaUri = absolutePath
            Log.w(tag, "   - temp file = " + absolutePath);
        }
        /*
        val path: String = Environment.getExternalStorageDirectory().path + "/" + Environment.DIRECTORY_DCIM + "/Camera/s20uhack_" + timeStamp + ".jpg"
        mMediaUri = path
        Log.w(tag, "mMediaURI = " + mMediaUri)
        return File(path)
        */
    }

    private fun TakeAndSavePicture() {
            val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            //val f = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
            //mMediaUri = Uri.fromFile(File(f, "MEDIT"+System.currentTimeMillis()+"jpg"));
            createImageFile()
            intent.putExtra(MediaStore.EXTRA_OUTPUT, mMediaUri);
            intent.putExtra("samsung.android.scaler.zoomMapRatio", 0.0)
            intent.putExtra("android.intent.extra.quickCapture",true);
            startActivityForResult(intent, RequestImageCapture);
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        Log.w(tag, "onActivityResult...")
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode == RESULT_OK){
            if (requestCode == RequestImageCapture) {
                Log.w(tag, "Received image capture result OK")
                // val bm = BitmapFactory.decodeFile(mMediaUri.getPath())
                //imgVIew.setImageBitmap(bm);

                //val scaledBitmap = ScaleImage (bm)
                //val bos = ByteArrayOutputStream ();
                //scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 100, bos);
                //Bitmap decoded = BitmapFactory.decodeStream(new ByteArrayInputStream(bos.toByteArray()));
                //imgVIew.setImageBitmap(scaledBitmap);
                //imageView.setImage(ImageSource.bitmap(scaledBitmap));
                //imageView1.setImage(ImageSource.bitmap(bm));
            } /*else if (requestCode == REQUEST_GALLERY) {
                //Uri selectedImage = imageReturnedIntent.getData();
                //imageview.setImageURI(selectedImage);
            }*/

        }else {
            Log.d("Error ", "user canceled !");
        }
        Thread.sleep(200)
        finish()
    }

    fun TakeAndSavePicture2() {
        Log.w(tag, "TakeAndSavePicture2");
        Intent(MediaStore.ACTION_IMAGE_CAPTURE).also { takePictureIntent ->
            // Ensure that there's a camera activity to handle the intent
            takePictureIntent.putExtra("samsung.android.scaler.zoomMapRatio", 0.0)
            takePictureIntent.putExtra("android.intent.extra.quickCapture",true);
            Log.w(tag, "- resolveActivity...");
            takePictureIntent.resolveActivity(packageManager)?.also {
                // Create the File where the photo should go
                Log.w(tag, "- create temp file...");
                val photoFile: File? = try {
                    Log.w(tag, "- createImageFile...");
                    createImageFile()
                } catch (ex: IOException) {
                    Log.e(tag, ex.toString())
                    null
                }
                // Continue only if the File was successfully created
                if (photoFile==null) Log.w(tag, "- createImageFile failed");
                else Log.w(tag, "    - createImageFile OK");

                photoFile?.also {
                    Log.w(tag, "- getUriForFile...");
                    val photoURI: Uri = FileProvider.getUriForFile(
                        this,
                        "com.s20uhack.fileprovider",
                        it
                    )
                    Log.w(tag, "    - uri=" + photoURI.toString());
                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI)
                    Log.w(tag, "- startActivity...");
                    startActivityForResult(takePictureIntent, RequestImageCapture)

                    Log.w(tag, "- mediaScanIntent...");
                    Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE).also { mediaScanIntent ->
                        // val f = File(currentPhotoPath)
                        mediaScanIntent.data = Uri.fromFile(photoFile) // (f)
                        Log.w(tag, "    - sendBroadcast...");
                        sendBroadcast(mediaScanIntent)
                        Log.w(tag, "All done");
                    }
                }
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            S20U_camera_launcherTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    // LaunchImageCaptureFromIntent()
                    //Thread.sleep(5000)
                    //LaunchCameraAppFromIntent()
                    // LaunchCameraFromCmd()
                    //while (true) {
                        //TakeAndSavePicture()
                        //TakeAndSavePicture2()
                    //}

                    Thread.sleep(200)
                    //finish()
                }
            }
        }
    }
}
